# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # - name: Start MySQL
    #   uses: obeezzy/mysql-action@v1.1
    #   with:
    #     mysql root password: ${{ secrets.MYSQL_PASSWORD }}
    #     mysql database: rr_test
    #     mysql version: latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: rr_test
        ports:
        - 3306:3306
        - 33060:33060
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # - name: Shutdown Ubuntu MySQL (SUDO)
    #   run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it

    - name: Verify MySQL connection
      env:
        PORT: ${{ job.services.mysql.ports[3306] }}
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
          sleep 1
        done

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    # - name: Check MySQL version
    #   run: |
    #     echo "Attempt to connect to server with client"
    #     docker ps
    #     CONTAINER_ID=`docker ps --format "{{.ID}}"`
    #     echo "docker network inspect host"
    #     docker network inspect host
    #     echo "docker network inspect bridge"
    #     docker network inspect bridge
    #     echo "docker network ls"
    #     docker network ls
    #     docker logs $CONTAINER_ID
    #     sudo ss -tulwn
    #     sleep 5
    #     docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" $CONTAINER_ID
    #     docker run --network bridge --rm mysql mysql -h $CONTAINER_ID -P 3306 --protocol=tcp -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "install plugin mysqlx soname 'mysqlx.so';"
    #     sudo ss -tulwn
    #     mysql --version

    - name: Check if XDevAPI is listening on port 33060
      run: mysql -u ${{ secrets.MYSQL_USER }} -ppassword --protocol=tcp -e "SHOW plugins" | grep -i mysqlx

    - name: Run tests
      env:
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: password
      run: |
        pushd tests
        echo -e "\e[92mSetup virtual environment"
        sudo apt-get install python3-venv
        python3 -m venv env
        . env/bin/activate
        echo -e "\e[92mUpgrade pip and install dependencies"
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo -e "\e[92mRun all tests"
        chmod +x ./runtests.sh
        export PYTHONPATH=.
        ./runtests.sh